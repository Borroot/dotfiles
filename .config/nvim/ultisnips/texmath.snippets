# DEFINE MATH CONTEXT
global !p
texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]
texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")
ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
		return first != ignore
	except StopIteration:
		return False
endglobal

## TEXT
context "math()"
snippet text "" iA
\text{${1:${VISUAL}}}
endsnippet

context "math()"
snippet cal "" wA
\mathcal{${1}}
endsnippet

context "math()"
snippet src "" wA
\mathsrc{${1}}
endsnippet

## ENVIRONMENTS
snippet mm "" wA
$${1:${VISUAL}}$
endsnippet

snippet md "" bA
\[
${1:${VISUAL}}
\]
endsnippet

snippet ali "" bA
\begin{align*}
	${0:${VISUAL}}
\end{align*}
endsnippet

snippet pmat "" bA
\begin{pmatrix}
	${0}
\end{pmatrix}
endsnippet

## LOGIC
context "math()"
snippet qed "" wA
_\square
endsnippet

# ARROWS
context "math()"
snippet => "" iA
\implies
endsnippet

context "math()"
snippet <= "" iA
\impliedby
endsnippet

context "math()"
snippet iff "" iA
\iff
endsnippet

# OPERATORS
context "math()"
snippet in "" wA
\in
endsnippet

context "math()"
snippet or "" wA
\lor
endsnippet

context "math()"
snippet and "" wA
\land
endsnippet

context "math()"
snippet ~~ "" wA
\approx
endsnippet

context "math()"
snippet != "" iA
\neq
endsnippet

context "math()"
snippet equiv "" wA
\equiv
endsnippet

## SCRIPTS
# SUB SCRIPTS
context "math()"
snippet __ "" iA
_{${1}}
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "" rwA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "" rwA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

# SUPER SCRIPTS
context "math()"
snippet ^^ "" iA
^{${1}}
endsnippet

context "math()"
snippet '([A-Za-z])\^(\d\d)' "" rwA
`!p snip.rv = match.group(1)`^{`!p snip.rv = match.group(2)`}
endsnippet

## LEFT AND RIGHT
context "math()"
snippet floor "" iA
\left\lfloor ${1} \right\rfloor
endsnippet

context "math()"
snippet ceil "" iA
\left\lceil ${1} \right\rceil
endsnippet

context "math()"
snippet '(\(\)|lr\()' "" riA
\left( ${1:${VISUAL}} \right)
endsnippet

context "math()"
snippet 'lr[<a]' "" riA
\left< ${1:${VISUAL}} \right>
endsnippet

context "math()"
snippet 'lr[\[b]' "" riA
\left[ ${1:${VISUAL}} \right]
endsnippet

context "math()"
snippet 'lr[\|p]' "" riA
\left| ${1:${VISUAL}} \right|
endsnippet

context "math()"
snippet 'lr[\\d]' "" riA
\left\| ${1:${VISUAL}} \right\|
endsnippet

context "math()"
snippet 'lr[{c]' "" riA
\left\\{ ${1:${VISUAL}} \right\\}
endsnippet

## FUNCTIONS
context "math()"
snippet log "" wA
\log_${1}{${2}}
endsnippet

context "math()"
snippet mod "" wA
\mod
endsnippet

context "math()"
snippet '(cos|tan|sin)' "" wrA
\\`!p snip.rv = match.group(1)`{${2}}
endsnippet
